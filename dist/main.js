(()=>{"use strict";class t{constructor(t){this.data=t,this.left=null,this.right=null}}class r{constructor(t){this.sortedArray=[...new Set(t)].sort(((t,r)=>t-r)),this.root=this.buildTree(this.sortedArray)}buildTree(r){if(0===r.length)return null;const e=Math.floor(r.length/2),l=new t(r[e]);return l.left=this.buildTree(r.slice(0,e)),l.right=this.buildTree(r.slice(e+1)),l}insert(r,e=this.root){return null===e?e=new t(r):(r<e.data?e.left=this.insert(r,e.left):r>e.data&&(e.right=this.insert(r,e.right)),e)}delete(t,r=this.root){if(null===r)return r;if(t<r.data)r.left=this.delete(t,r.left);else if(t>r.data)r.right=this.delete(t,r.right);else{if(null===r.left)return r.right;if(null===r.right)return r.left;r.data=function(t){let r=t.data;for(;null!==t.left;)r=t.left.data,t=t.left;return r}(r.right),r.right=this.delete(r.data,r.right)}return r}find(t,r=this.root){return r?(r.data===t||(t<r.data?r=this.find(t,r.left):t>r.data&&(r=this.find(t,r.right))),r):null}levelOrder(t,r=this.root){if(null===r)return null;if(t){const e=[];for(e.push(r);e.length>0;){const r=e[0];t(r),null!==r.left&&e.push(r.left),null!==r.right&&e.push(r.right),e.shift()}}if(!t){const t=[],e=[];for(t.push(r);t.length>0;){const r=t[0];e.push(r.data),null!==r.left&&t.push(r.left),null!==r.right&&t.push(r.right),t.shift()}return e}}inOrder(t,r=this.root){if(null!==r){if(t){if(null===r)return;this.inOrder(t,r.left),t(r.data),this.inOrder(t,r.right)}if(!t){const t=[],e=r=>{null!==r&&(e(r.left),t.push(r.data),e(r.right))};return e(r),t}}}preOrder(t,r=this.root){if(null!==r){if(t){if(null===r)return;t(r),this.preOrder(t,r.left),this.preOrder(t,r.right)}if(!t){const t=[],e=r=>{null!==r&&(t.push(r.data),e(r.left),e(r.right))};return e(r),t}}}postOrder(t,r=this.root){if(null!==r){if(t){if(null===r)return;this.preOrder(t,r.left),this.preOrder(t,r.right),t(r)}if(!t){const t=[],e=r=>{null!==r&&(e(r.left),e(r.right),t.push(r.data))};return e(r),t}}}height(t=this.root){if(null===t)return-1;const r=this.height(t.left),e=this.height(t.right);return Math.max(r,e)+1}depth(t,r=this.root,e=0){return null===t?0:t.data===r.data?e:r.data<t.data?this.depth(t,r.right,e+1):this.depth(t,r.left,e+1)}isBalanced(t=this.root){const r=this.height(t.left),e=this.height(t.right);return!(Math.abs(r-e)>1)}rebalance(){const t=this.inOrder();return new r(t)}prettyPrint(t=this.root,r="",e=!0){t.right&&this.prettyPrint(t.right,`${r}${e?"|   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),t.left&&this.prettyPrint(t.left,`${r}${e?"    ":"|   "}`,!0)}}let e=new r(function(t){const r=[];let e;for(e=0;e<10;e++){const t=Math.floor(9e3*Math.random());r.push(t)}return r}());e.prettyPrint(),console.log(e.isBalanced()),console.log(e.levelOrder()),console.log(e.preOrder()),console.log(e.postOrder()),console.log(e.inOrder()),e.insert(200),e.insert(300),e.insert(400),e.prettyPrint(),console.log(e.isBalanced()),e=e.rebalance(),e.prettyPrint(),console.log(e.isBalanced()),console.log(e.levelOrder()),console.log(e.preOrder()),console.log(e.postOrder()),console.log(e.inOrder())})();